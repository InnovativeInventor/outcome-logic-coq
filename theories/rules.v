Require Import assertion ol syntax.

Reserved Notation "‚ä¢atom ‚ü® P ‚ü© c ‚ü® Q ‚ü©".

Inductive rules_atom : prop -> cmd -> prop -> Prop :=
| RuleAssign x e :
  ‚ä¢atom ‚ü® ok ‚ü© x <- e ‚ü® x == e ‚ü©
| RuleAlloc x :
  ‚ä¢atom ‚ü® ok ‚ü© x <- alloc ‚ü® var x --> - ‚ü©
| RuleStoreOk e1 e2 :
  ‚ä¢atom ‚ü® e1 --> - ‚ü© [ e1 ] <- e2 ‚ü® e1 --> e2 ‚ü©
| RuleStoreErr e1 e2 :
  ‚ä¢atom ‚ü® e1 -/-> ‚ü© [ e1 ] <- e2 ‚ü® error ‚ü©
| RuleLoadOk e e' x :
  ‚ä¢atom ‚ü® e --> e' ‚ü© x <- [ e ] ‚ü® x == e' ‚ü©
| RuleLoadErr x e :
  ‚ä¢atom ‚ü® e -/-> ‚ü© x <- [ e ] ‚ü® error ‚ü©
where "‚ä¢atom ‚ü® P ‚ü© c ‚ü® Q ‚ü©" := (rules_atom P c Q).

Reserved Notation "‚ä¢ ‚ü® phi ‚ü© C ‚ü® psi ‚ü©".

Inductive rules : assertion -> cl -> assertion -> Prop :=
| RuleZero phi : ‚ä¢ ‚ü® phi ‚ü© ùüò ‚ü® ‚ä§‚äï ‚ü©
| RuleOne phi : ‚ä¢ ‚ü® phi ‚ü© ùüô ‚ü® phi ‚ü©
| RuleSeq phi psi theta C1 C2 :
  ‚ä¢ ‚ü® phi ‚ü© C1 ‚ü® psi ‚ü© ->
  ‚ä¢ ‚ü® psi ‚ü© C2 ‚ü® theta ‚ü© ->
  ‚ä¢ ‚ü® phi ‚ü© C1 ‚®ü C2 ‚ü® theta ‚ü©
| RuleSplit phi1 psi1 phi2 psi2 C :
  ‚ä¢ ‚ü® phi1 ‚ü© C ‚ü® psi1 ‚ü© ->
  ‚ä¢ ‚ü® phi2 ‚ü© C ‚ü® psi2 ‚ü© ->
  ‚ä¢ ‚ü® phi1 ‚äï phi2 ‚ü© C ‚ü® psi1 ‚äï psi2 ‚ü©
| RuleConsequence phi phi' psi psi' C :
  (forall S, S ‚ä® phi' ‚áí phi) ->
  ‚ä¢ ‚ü® phi ‚ü© C ‚ü® psi ‚ü© ->
  (forall S, S ‚ä® psi ‚áí psi') ->
  ‚ä¢ ‚ü® phi' ‚ü© C ‚ü® psi' ‚ü©
| RuleEmpty C : ‚ä¢ ‚ü® ‚ä§‚äï ‚ü© C ‚ü® ‚ä§‚äï ‚ü©
| RuleTrue phi C : ‚ä¢ ‚ü® phi ‚ü© C ‚ü® ‚ä§ ‚ü©
| RuleFalse C phi : ‚ä¢ ‚ü® ‚ä• ‚ü© C ‚ü® phi ‚ü©
| RulePlus phi psi1 psi2 C1 C2 :
  ‚ä¢ ‚ü® phi ‚ü© C1 ‚ü® psi1 ‚ü© ->
  ‚ä¢ ‚ü® phi ‚ü© C2 ‚ü® psi2 ‚ü© ->
  ‚ä¢ ‚ü® phi ‚ü© C1 + C2 ‚ü® psi1 ‚äï psi2 ‚ü©
| RuleInduction phi psi C :
  ‚ä¢ ‚ü® phi ‚ü© ùüô + C ‚®ü C ‚ãÜ ‚ü® psi ‚ü© ->
  ‚ä¢ ‚ü® phi ‚ü© C ‚ãÜ ‚ü® psi ‚ü©
| RuleCmd P Q c :
  ‚ä¢atom ‚ü® P ‚ü© c ‚ü® Q ‚ü© ->
  ‚ä¢ ‚ü® P ‚ü© c ‚ü® Q ‚ü©
where "‚ä¢ ‚ü® phi ‚ü© C ‚ü® psi ‚ü©" := (rules phi C psi).
