Require Import semantics.
Require Import set.

Inductive prop : Type :=
| Ok
| Err
| MapsTo (e : expr) (e : expr)
| Mapped (e : expr)
| Unmapped (e : expr)
| Assigned (x : nat) (e : expr)
.

Notation "e --> v" := (MapsTo e v) (at level 55).
Notation "e --> -" := (Mapped e) (at level 55).
Notation "e -/->" := (Unmapped e) (at level 55).
Notation "x == e" := (Assigned x e) (at level 55).

Inductive assertion : Type :=
| Top : assertion
| Bot : assertion
| Diverge : assertion
| And : assertion -> assertion -> assertion
| Or : assertion -> assertion -> assertion
| Conj : assertion -> assertion -> assertion
| Impl : assertion -> assertion -> assertion
| Atomic : prop -> assertion
.

Coercion Atomic : prop >-> assertion.

Notation "‚ä§" := Top.
Notation "‚ä•" := Bot.
Notation "‚ä§‚äï" := Diverge.
Notation "phi ‚àß psi" := (And phi psi) (at level 70).
Notation "phi ‚à® psi" := (Or phi psi) (at level 70).
Notation "phi ‚äï psi" := (Conj phi psi) (at level 80).
Notation "phi ‚áí psi" := (Impl phi psi) (at level 60).

(* TODO: add more atomic propositions *)
Definition sat_atom (S : set state) (P : prop) : Prop :=
  match P with
  | Ok => S ‚â° (fun œÉ => exists s h, œÉ = <{s, h}>)
  | Err => S ‚â° (ret err)
  | e1 --> e2 =>
      S ‚â° (fun œÉ => exists s h i v,
               œÉ = <{s, h}> /\ isnat s e1 i /\
                 eval_expr e2 s = v /\ mapsto h i v)
  | e --> - =>
      S ‚â° (fun œÉ => exists s h i v, œÉ = <{s, h}> /\ isnat s e i /\ mapsto h i v)
  | e -/-> =>
      S ‚â° (fun œÉ => exists s h, œÉ = <{s, h}> /\ eval_expr e s = None)
  | x == e =>
      S ‚â° (fun œÉ => exists s h v, œÉ = <{s, h}> /\ eval_expr e s = v /\ eval_expr (var x) s = v)
  end.

Notation "S ‚ä®atom P" := (sat_atom S P) (at level 80).

Reserved Notation "S ‚ä® phi" (at level 80).
Reserved Notation "S ‚ä®sem phi" (at level 80).

Fixpoint sat (S : set state) (phi : assertion) : Prop :=
  match phi with
  | ‚ä§ => True
  | ‚ä• => False
  | ‚ä§‚äï => S ‚â° ‚àÖ
  | phi ‚àß psi => S ‚ä® phi /\ S ‚ä® psi
  | phi ‚à® psi => S ‚ä® phi \/ S ‚ä® psi
  | phi ‚äï psi => exists S1 S2, S ‚â° S1 ‚óá S2 /\ S1 ‚ä® phi /\ S2 ‚ä® psi
  | phi ‚áí psi => forall S', S ‚â° S' -> S' ‚ä® phi -> S' ‚ä® psi
  | Atomic P => S ‚ä®atom P
  end
where "S ‚ä® phi" := (sat S phi).

Definition outputs (C : cl) (œÉ : state) : set state :=
  fun œÉ' => (C , œÉ) ‚áì œÉ'.

Notation "‚ü¶ C ‚üß" := (outputs C).

Definition triple (phi : assertion) (C : cl) (psi : assertion) : Prop :=
  forall S, S ‚ä® phi -> (S >>= ‚ü¶ C ‚üß) ‚ä® psi.

Notation "‚ä® ‚ü® phi ‚ü© C ‚ü® psi ‚ü©" := (triple phi C psi).

Definition semantic_sat (phi : set (set state)) : Prop :=
  exists x, x ‚àà phi.

Notation "m ‚ä®sem phi" := (semantic_sat m phi).

Definition semantic_triple (phi : set (set state)) (C : cl) (psi : set (set state)) : Prop :=
  forall m, m ‚àà phi -> (m >>= ‚ü¶ C ‚üß) ‚àà psi.

Notation "‚ä®sem ‚ü® phi ‚ü© C ‚ü® psi ‚ü©" := (semantic_triple phi C psi).

Definition semantic_triple_neg (phi : set (set state)) (C : cl) (psi : set (set state)) : Prop :=
  exists m, m ‚àà phi /\ (m >>= ‚ü¶ C ‚üß) ‚àà (set_not psi).

Notation "‚ä®Ã∏sem ‚ü® phi ‚ü© C ‚ü® psi ‚ü©" := (semantic_triple_neg phi C psi).

Definition underapprox (phi : assertion) (C : cl) (psi : assertion) : Prop :=
  triple phi C (psi ‚äï ‚ä§).

Notation "‚ä®‚Üì ‚ü® phi ‚ü© C ‚ü® psi ‚ü©" := (underapprox phi C psi).

Definition pc (phi : assertion) (C : cl) (psi : assertion) : Prop :=
  triple phi C (psi ‚äï ‚ä§‚äï).

Notation "‚ä®pc ‚ü® phi ‚ü© C ‚ü® psi ‚ü©" := (pc phi C psi).

Reserved Notation "‚ä¢atom ‚ü® P ‚ü© c ‚ü® Q ‚ü©".

Inductive rules_atom : prop -> cmd -> prop -> Prop :=
| RuleAssign x e :
  ‚ä¢atom ‚ü® Ok ‚ü© x <- e ‚ü® x == e ‚ü©
| RuleAlloc x :
  ‚ä¢atom ‚ü® Ok ‚ü© x <- alloc ‚ü® var x --> - ‚ü©
| RuleWriteOk e1 e2 :
  ‚ä¢atom ‚ü® e1 --> - ‚ü© [ e1 ] <- e2 ‚ü® e1 --> e2 ‚ü©
| RuleWriteErr e1 e2 :
  ‚ä¢atom ‚ü® e1 -/-> ‚ü© [ e1 ] <- e2 ‚ü® Err ‚ü©
where "‚ä¢atom ‚ü® P ‚ü© c ‚ü® Q ‚ü©" := (rules_atom P c Q).

Reserved Notation "‚ä¢ ‚ü® phi ‚ü© C ‚ü® psi ‚ü©".

Inductive rules : assertion -> cl -> assertion -> Prop :=
| RuleZero phi : ‚ä¢ ‚ü® phi ‚ü© ùüò ‚ü® ‚ä§‚äï ‚ü©
| RuleOne phi : ‚ä¢ ‚ü® phi ‚ü© ùüô ‚ü® phi ‚ü©
| RuleSeq phi psi theta C1 C2 :
  ‚ä¢ ‚ü® phi ‚ü© C1 ‚ü® psi ‚ü© ->
  ‚ä¢ ‚ü® psi ‚ü© C2 ‚ü® theta ‚ü© ->
  ‚ä¢ ‚ü® phi ‚ü© C1 ‚®ü C2 ‚ü® theta ‚ü©
| RuleSplit phi1 psi1 phi2 psi2 C :
  ‚ä¢ ‚ü® phi1 ‚ü© C ‚ü® psi1 ‚ü© ->
  ‚ä¢ ‚ü® phi2 ‚ü© C ‚ü® psi2 ‚ü© ->
  ‚ä¢ ‚ü® phi1 ‚äï phi2 ‚ü© C ‚ü® psi1 ‚äï psi2 ‚ü©
| RuleConsequence phi phi' psi psi' C :
  (forall S, S ‚ä® phi' ‚áí phi) ->
  ‚ä¢ ‚ü® phi ‚ü© C ‚ü® psi ‚ü© ->
  (forall S, S ‚ä® psi ‚áí psi') ->
  ‚ä¢ ‚ü® phi' ‚ü© C ‚ü® psi' ‚ü©
| RuleEmpty C : ‚ä¢ ‚ü® ‚ä§‚äï ‚ü© C ‚ü® ‚ä§‚äï ‚ü©
| RuleTrue phi C : ‚ä¢ ‚ü® phi ‚ü© C ‚ü® ‚ä§ ‚ü©
| RuleFalse C phi : ‚ä¢ ‚ü® ‚ä• ‚ü© C ‚ü® phi ‚ü©
| RulePlus phi psi1 psi2 C1 C2 :
  ‚ä¢ ‚ü® phi ‚ü© C1 ‚ü® psi1 ‚ü© ->
  ‚ä¢ ‚ü® phi ‚ü© C2 ‚ü® psi2 ‚ü© ->
  ‚ä¢ ‚ü® phi ‚ü© C1 + C2 ‚ü® psi1 ‚äï psi2 ‚ü©
| RuleInduction phi psi C :
  ‚ä¢ ‚ü® phi ‚ü© ùüô + C ‚®ü C ‚ãÜ ‚ü® psi ‚ü© ->
  ‚ä¢ ‚ü® phi ‚ü© C ‚ãÜ ‚ü® psi ‚ü©
| RuleCmd P Q c :
  ‚ä¢atom ‚ü® P ‚ü© c ‚ü® Q ‚ü© ->
  ‚ä¢ ‚ü® P ‚ü© c ‚ü® Q ‚ü©
where "‚ä¢ ‚ü® phi ‚ü© C ‚ü® psi ‚ü©" := (rules phi C psi).
