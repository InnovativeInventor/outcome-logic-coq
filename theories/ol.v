Unset Universe Checking.

Require Import semantics.
Require Import util.

Inductive prop : Type :=
| Sat
| Unsat
.

Inductive assertion : Type :=
| Top : assertion
| Bot : assertion
| None : assertion
| And : assertion -> assertion -> assertion
| Or : assertion -> assertion -> assertion
| Conj : assertion -> assertion -> assertion
| Impl : assertion -> assertion -> assertion
| Atomic : prop -> assertion
.

Coercion Atomic : prop >-> assertion.

Notation "โค" := Top.
Notation "โฅ" := Bot.
Notation "โคโ" := None.
Notation "phi โง psi" := (And phi psi) (at level 80).
Notation "phi โจ psi" := (Or phi psi) (at level 80).
Notation "phi โ psi" := (Conj phi psi) (at level 80).
Notation "phi โ psi" := (Impl phi psi) (at level 80).

(* TODO: add more atomic propositions *)
Definition sat_atom (m : computation state) (P : prop) : Prop :=
  match P with
  | Sat => True
  | Unsat => False
  end.

Reserved Notation "m โจ phi" (at level 80).

Fixpoint sat (m : computation state) (phi : assertion) : Prop :=
  match phi with
  | โค => True
  | โฅ => False
  | โคโ => m ~ โ
  | phi โง psi => m โจ phi /\ m โจ psi
  | phi โจ psi => m โจ phi \/ m โจ psi
  | phi โ psi => exists m1 m2, m ~ m1 โ m2 /\ m1 โจ phi /\ m2 โจ psi
  | phi โ psi => forall m', m' ~ m -> m' โจ phi -> m' โจ psi
  | Atomic P => sat_atom m P
  end
where "m โจ phi" := (sat m phi).

Definition triple (phi : assertion) (C : cl) (psi : assertion) : Prop :=
  forall (m : computation state), m โจ phi -> (m >>= โฆ C โง) โจ psi.

Notation "โจ โจ phi โฉ C โจ psi โฉ" := (triple phi C psi).

Definition underapprox (phi : assertion) (C : cl) (psi : assertion) : Prop :=
  triple phi C (psi โ โค).

Notation "โจโ โจ phi โฉ C โจ psi โฉ" := (underapprox phi C psi).

Definition pc (phi : assertion) (C : cl) (psi : assertion) : Prop :=
  triple phi C (psi โ โคโ).

Notation "โจpc โจ phi โฉ C โจ psi โฉ" := (pc phi C psi).

Example ex : โจ โจ โค โฉ assume Tru โจ โค โฉ.
Proof.
  intros ??. constructor.
Qed.

Reserved Notation "โข โจ phi โฉ C โจ psi โฉ".

Inductive rules : assertion -> cl -> assertion -> Prop :=
| RuleZero : forall phi, rules phi ๐ โคโ
| RuleOne : forall phi, rules phi ๐ phi
where "โข โจ phi โฉ C โจ psi โฉ" := (rules phi C psi).
